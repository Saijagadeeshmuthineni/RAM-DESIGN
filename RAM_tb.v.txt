module synchronous_ram_tb;
    parameter DATA_WIDTH = 8;
    parameter ADDR_WIDTH = 4;
    reg clk;
    reg rst;
    reg write_enable;
    reg read_enable;
    reg [ADDR_WIDTH-1:0] address;
    reg [DATA_WIDTH-1:0] write_data;
    wire [DATA_WIDTH-1:0] read_data;
    synchronous_ram #(
        .DATA_WIDTH(DATA_WIDTH),
        .ADDR_WIDTH(ADDR_WIDTH)
    ) dut (
        .clk(clk),
        .rst(rst),
        .write_enable(write_enable),
        .read_enable(read_enable),
        .address(address),
        .write_data(write_data),
        .read_data(read_data)
    );
   initial begin
    $dumpfile ("dump.vcd");
    $dumpvars(1);
               end
    initial begin
        clk = 0;
        forever #5 clk = ~clk;
    end
    initial begin
        rst = 0;
        write_enable = 0;
        read_enable = 0;
        address = 0;
        write_data = 0;
        rst = 1;
        #10;
        rst = 0;
        @(posedge clk);
        write_enable = 1;
        address = 4'h1;
        write_data = 8'hA5;
        @(posedge clk);
        write_enable = 0;
        @(posedge clk);
        read_enable = 1;
        address = 4'h1;
        @(posedge clk);
        read_enable = 0;
        #1;
        $display("Read Data at Address %h: %h", address, read_data);
        @(posedge clk);
        write_enable = 1;
        address = 4'h2;
        write_data = 8'h3C;
        @(posedge clk);
        write_enable = 0;
        @(posedge clk);
        read_enable = 1;
        address = 4'h2;
        @(posedge clk);
        read_enable = 0;
        #1;
        $display("Read Data at Address %h: %h", address, read_data);
        #10;
        $stop;
    end

endmodule
